plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-kapt"
    id "kotlin-parcelize"
}

android {
    compileSdkVersion rootProject.ext.compileSDKVersion
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.omgodse.notally"
        minSdkVersion rootProject.ext.minSDKVersion
        targetSdkVersion rootProject.ext.targetSDKVersion
        versionCode 30
        versionName "3.5"
        resConfigs "en", "ca", "cs", "de", "es", "fr", "hu", "in", "it", "nb", "nl", "pl", "pt-rBR", "ru", "sv", "tl", "uk"
        vectorDrawables.generatedDensities = []
    }

    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas")
        }
    }

    buildTypes {
        release {
            crunchPngs false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions { jvmTarget = JavaVersion.VERSION_1_8 }

    buildFeatures { viewBinding true }
}

dependencies {
    final def roomVersion = "2.2.6"
    final def stableNavVersion = "2.3.3"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    implementation "androidx.preference:preference-ktx:1.1.1"

    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.0"

    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    implementation "androidx.room:room-runtime:$roomVersion"

    implementation "androidx.navigation:navigation-ui-ktx:$stableNavVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$stableNavVersion"

    implementation "org.ocpsoft.prettytime:prettytime:4.0.6.Final"
    implementation "com.google.android.material:material:1.3.0"

    implementation project(":Post")
}

/**
 * This is a neat script I've made that outputs the translatable strings in
 * the main`values.xml` file to a CSV file in the `build` dir of the module.
 * (Useful for giving to translators)
 *
 * If you are looking to use this in your project as well, bear in mind that
 * this is a custom solution. It does not handle edge cases such as quotation marks
 * or commas in strings.
 *
 * To run, use the integrated terminal window in Android Studio or navigate to the
 * root directory of your project and type `gradlew CSV`
 */
tasks.register("CSV") {
    def csv = file("$buildDir/Notally Translations.csv")
    def strings = file("$projectDir/src/main/res/values/strings.xml")

    def writer = csv.newWriter("UTF-8")
    writer.writeLine("English Phrases , Translated Phrases")

    new XmlParser().parse(strings).iterator().forEachRemaining { Node node ->
        if (isTranslatable(node)) {
            writer.writeLine(node.text() + " , ")
        }
    }

    writer.close()
}

private static boolean isTranslatable(Node node) {
    def translatable = true
    def translatableAttribute = node.attribute("translatable")
    if (translatableAttribute != null) {
        translatable = Boolean.parseBoolean(translatableAttribute)
    }
    return translatable
}